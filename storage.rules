// storage.rules
rules_version = '2';
service firebase.storage {
 match /b/{bucket}/o {

 // ==== Общие хелперы (оставил как у тебя) ====
 function signedIn() { return request.auth != null; }
 function isImage() { return request.resource.contentType.matches('image/.*'); }
 function under8MB() { return request.resource.size < 8 * 1024 * 1024; }

 // ==== Доп. хелпер только для publicReviews ====
 // Разрешаем типы, которые часто приходят с iOS (HEIC/HEIF) или как octet-stream
 function isImageRelaxed() {
 return isImage() ||
 request.resource.contentType in [
 'image/jpeg','image/jpg','image/png','image/webp','image/heic','image/heif'
 ] ||
 request.resource.contentType == 'application/octet-stream';
 }

 // ==== Avatars ====
 match /avatars/{uid}/{allPaths=**} {
 allow read: if true;
 allow write: if signedIn() && request.auth.uid == uid && isImage() && under8MB();
 }

 // ==== Listing images (if used) ====
 match /listing-images/{uid}/{allPaths=**} {
 allow read: if true;
 allow write: if signedIn() && request.auth.uid == uid && isImage() && under8MB();
 }

 // ==== Reviews (TEMP для локалки/дева — оставляю как есть) ====
 match /reviews/{allPaths=**} {
 allow read: if true;
 allow write: if isImage() && under8MB();
 }

 // ==== Public Reviews photos ====
 // Сюда грузим файлы из формы отзывов: publicReviews/{uid}/...
 match /publicReviews/{uid}/{file=**} {
 allow read: if true; // можно ограничить до signedIn(), если нужно
 allow write: if signedIn()
 && request.auth.uid == uid
 && isImageRelaxed()
 && under8MB();
 }
 }
}
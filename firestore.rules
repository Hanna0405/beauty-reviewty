rules_version = '2';
service cloud.firestore {
 match /databases/{database}/documents {
 function isSignedIn() { return request.auth != null; }
 function isOwner(userId) { return isSignedIn() && request.auth.uid == userId; }

 match /services/{docId} { allow read: if true; allow write: if false; }
 match /cities/{docId} { allow read: if true; allow write: if false; }

 match /users/{userId} {
 allow read: if true;
 allow create: if isOwner(userId);
 allow update: if isOwner(userId);
 allow delete: if false;
 }

 match /masters/{userId} {
 allow read: if true;
 allow create, update: if isOwner(userId);
 allow delete: if false;
 }

 match /profiles/{uid} {
 allow read: if true;
 allow create, update, delete: if request.auth != null && request.auth.uid == uid;
 }

 match /listings/{id} {
 allow read: if true;
 allow create: if request.auth != null
 && request.resource.data.ownerId == request.auth.uid;
 allow update, delete: if request.auth != null
 && resource.data.ownerId == request.auth.uid;
 }

 // Reviews
 match /reviews/{reviewId} {
 function isSignedIn() { return request.auth != null; }
 function newAuthor() { return request.resource.data.authorId ?? request.resource.data.authorUid; }
 function oldAuthor() { return resource.data.authorId ?? resource.data.authorUid; }

 allow read: if true;
 allow create: if isSignedIn() && newAuthor() == request.auth.uid;
 allow update, delete: if isSignedIn()
 && oldAuthor() == request.auth.uid
 && newAuthor() == oldAuthor(); // forbid changing author
 }

 // Community Masters
 match /community_masters/{mid} {
 allow read: if true;
 allow create: if request.auth != null
 && request.resource.data.createdByUid == request.auth.uid;
 allow update, delete: if request.auth != null
 && resource.data.createdByUid == request.auth.uid;
 }
 }
}